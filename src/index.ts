import type {
  BuildCtx,
  CompilerCtx,
  ComponentCompilerMeta,
  Diagnostic,
  JsonDocs,
  OutputTargetCustom,
  StencilConfig,
} from '@stencil/core/internal';
import type { Config } from '@stencil/core';

export const webTypesOutputTarget = (): OutputTargetCustom => ({
  type: 'custom',
  name: 'web-types',
  validate(config: Config, diagnostics: Diagnostic[]) {
    return true;
  },
  async generator(config: Config, compilerCtx: CompilerCtx, buildCtx: BuildCtx, docs: JsonDocs) {
    const timespan = buildCtx.createTimeSpan('generate web-types started', true);

    const webTypes = await generateWebTypes(config, compilerCtx, buildCtx.components);
    await compilerCtx.fs.writeFile('./web-types.json', JSON.stringify(webTypes,null,4));

    timespan.finish('generate web-types finished');
  },
});

type WebType = {
  $schema: string;
  name: string;
  version: string;
  "description-markup": string;
  contributions: any;
};

const generateWebTypes = async (
  config: StencilConfig,
  compilerCtx: CompilerCtx,
  components: ComponentCompilerMeta[],
): Promise<WebType> => {
  // for now, let's just try to output the contributions of the my-component
  // component generated by `npm init stencil`
  return {
    $schema: 'https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json',
    "description-markup": 'markdown',
    name: 'example',
    version: '0.0.1',
    contributions: {
      html: {
        elements: [
          {
            name: 'my-component',
            description: 'The initial app from our starter',
            attributes: [
              {
                name: 'first',
                description: 'Your first name',
              },

              {
                name: 'middle',
                description: "A middle name, unsure if it's yours or nto",
              },

              {
                name: 'last',
                description: "The last name that we'll ask for",
              },
            ],
          },
        ],
      },
    },
  };
};
